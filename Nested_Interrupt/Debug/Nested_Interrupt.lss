
Nested_Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000768  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000768  000007dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001e60  00000000  00000000  000007dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e78  00000000  00000000  0000263c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000021  00000000  00000000  000034b4  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 ba 00 	jmp	0x174	; 0x174 <__vector_1>
   8:	0c 94 b0 01 	jmp	0x360	; 0x360 <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 b2 03 	jmp	0x764	; 0x764 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	85 e5       	ldi	r24, 0x55	; 85
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	25 e5       	ldi	r18, 0x55	; 85
  7a:	30 e0       	ldi	r19, 0x00	; 0
  7c:	f9 01       	movw	r30, r18
  7e:	20 81       	ld	r18, Z
  80:	21 60       	ori	r18, 0x01	; 1
  82:	fc 01       	movw	r30, r24
  84:	20 83       	st	Z, r18
  86:	85 e5       	ldi	r24, 0x55	; 85
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	25 e5       	ldi	r18, 0x55	; 85
  8c:	30 e0       	ldi	r19, 0x00	; 0
  8e:	f9 01       	movw	r30, r18
  90:	20 81       	ld	r18, Z
  92:	22 60       	ori	r18, 0x02	; 2
  94:	fc 01       	movw	r30, r24
  96:	20 83       	st	Z, r18
  98:	8b e5       	ldi	r24, 0x5B	; 91
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	2b e5       	ldi	r18, 0x5B	; 91
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	f9 01       	movw	r30, r18
  a2:	20 81       	ld	r18, Z
  a4:	20 64       	ori	r18, 0x40	; 64
  a6:	fc 01       	movw	r30, r24
  a8:	20 83       	st	Z, r18
  aa:	85 e5       	ldi	r24, 0x55	; 85
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	25 e5       	ldi	r18, 0x55	; 85
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	f9 01       	movw	r30, r18
  b4:	20 81       	ld	r18, Z
  b6:	28 60       	ori	r18, 0x08	; 8
  b8:	fc 01       	movw	r30, r24
  ba:	20 83       	st	Z, r18
  bc:	85 e5       	ldi	r24, 0x55	; 85
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	25 e5       	ldi	r18, 0x55	; 85
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	f9 01       	movw	r30, r18
  c6:	20 81       	ld	r18, Z
  c8:	24 60       	ori	r18, 0x04	; 4
  ca:	fc 01       	movw	r30, r24
  cc:	20 83       	st	Z, r18
  ce:	8b e5       	ldi	r24, 0x5B	; 91
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	2b e5       	ldi	r18, 0x5B	; 91
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	f9 01       	movw	r30, r18
  d8:	20 81       	ld	r18, Z
  da:	20 68       	ori	r18, 0x80	; 128
  dc:	fc 01       	movw	r30, r24
  de:	20 83       	st	Z, r18
  e0:	78 94       	sei
  e2:	84 e3       	ldi	r24, 0x34	; 52
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	24 e3       	ldi	r18, 0x34	; 52
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	f9 01       	movw	r30, r18
  ec:	20 81       	ld	r18, Z
  ee:	20 62       	ori	r18, 0x20	; 32
  f0:	fc 01       	movw	r30, r24
  f2:	20 83       	st	Z, r18
  f4:	84 e3       	ldi	r24, 0x34	; 52
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	24 e3       	ldi	r18, 0x34	; 52
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	f9 01       	movw	r30, r18
  fe:	20 81       	ld	r18, Z
 100:	20 64       	ori	r18, 0x40	; 64
 102:	fc 01       	movw	r30, r24
 104:	20 83       	st	Z, r18
 106:	84 e3       	ldi	r24, 0x34	; 52
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	24 e3       	ldi	r18, 0x34	; 52
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	f9 01       	movw	r30, r18
 110:	20 81       	ld	r18, Z
 112:	20 68       	ori	r18, 0x80	; 128
 114:	fc 01       	movw	r30, r24
 116:	20 83       	st	Z, r18
 118:	81 e3       	ldi	r24, 0x31	; 49
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	21 e3       	ldi	r18, 0x31	; 49
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	f9 01       	movw	r30, r18
 122:	20 81       	ld	r18, Z
 124:	20 62       	ori	r18, 0x20	; 32
 126:	fc 01       	movw	r30, r24
 128:	20 83       	st	Z, r18
 12a:	81 e3       	ldi	r24, 0x31	; 49
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	21 e3       	ldi	r18, 0x31	; 49
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	f9 01       	movw	r30, r18
 134:	20 81       	ld	r18, Z
 136:	20 64       	ori	r18, 0x40	; 64
 138:	fc 01       	movw	r30, r24
 13a:	20 83       	st	Z, r18
 13c:	81 e3       	ldi	r24, 0x31	; 49
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	21 e3       	ldi	r18, 0x31	; 49
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	f9 01       	movw	r30, r18
 146:	20 81       	ld	r18, Z
 148:	20 68       	ori	r18, 0x80	; 128
 14a:	fc 01       	movw	r30, r24
 14c:	20 83       	st	Z, r18
 14e:	82 e3       	ldi	r24, 0x32	; 50
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	22 e3       	ldi	r18, 0x32	; 50
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	f9 01       	movw	r30, r18
 158:	20 81       	ld	r18, Z
 15a:	20 62       	ori	r18, 0x20	; 32
 15c:	fc 01       	movw	r30, r24
 15e:	20 83       	st	Z, r18
 160:	85 e3       	ldi	r24, 0x35	; 53
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	25 e3       	ldi	r18, 0x35	; 53
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	f9 01       	movw	r30, r18
 16a:	20 81       	ld	r18, Z
 16c:	20 62       	ori	r18, 0x20	; 32
 16e:	fc 01       	movw	r30, r24
 170:	20 83       	st	Z, r18
 172:	ed cf       	rjmp	.-38     	; 0x14e <main+0xe2>

00000174 <__vector_1>:
		set_bit(PORTD, 5);
		set_bit(PORTC, 5);
	}
}

ISR(INT0_vect)	{
 174:	1f 92       	push	r1
 176:	0f 92       	push	r0
 178:	00 90 5f 00 	lds	r0, 0x005F
 17c:	0f 92       	push	r0
 17e:	11 24       	eor	r1, r1
 180:	2f 93       	push	r18
 182:	3f 93       	push	r19
 184:	4f 93       	push	r20
 186:	5f 93       	push	r21
 188:	6f 93       	push	r22
 18a:	7f 93       	push	r23
 18c:	8f 93       	push	r24
 18e:	9f 93       	push	r25
 190:	af 93       	push	r26
 192:	bf 93       	push	r27
 194:	ef 93       	push	r30
 196:	ff 93       	push	r31
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	cd b7       	in	r28, 0x3d	; 61
 19e:	de b7       	in	r29, 0x3e	; 62
 1a0:	2e 97       	sbiw	r28, 0x0e	; 14
 1a2:	de bf       	out	0x3e, r29	; 62
 1a4:	cd bf       	out	0x3d, r28	; 61

		clr_bit(PORTC, 5);
 1a6:	85 e3       	ldi	r24, 0x35	; 53
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	25 e3       	ldi	r18, 0x35	; 53
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	f9 01       	movw	r30, r18
 1b0:	20 81       	ld	r18, Z
 1b2:	2f 7d       	andi	r18, 0xDF	; 223
 1b4:	fc 01       	movw	r30, r24
 1b6:	20 83       	st	Z, r18
		clr_bit(PORTC, 6);
 1b8:	85 e3       	ldi	r24, 0x35	; 53
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	25 e3       	ldi	r18, 0x35	; 53
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	f9 01       	movw	r30, r18
 1c2:	20 81       	ld	r18, Z
 1c4:	2f 7b       	andi	r18, 0xBF	; 191
 1c6:	fc 01       	movw	r30, r24
 1c8:	20 83       	st	Z, r18
		clr_bit(PORTC, 7);
 1ca:	85 e3       	ldi	r24, 0x35	; 53
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	25 e3       	ldi	r18, 0x35	; 53
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	f9 01       	movw	r30, r18
 1d4:	20 81       	ld	r18, Z
 1d6:	2f 77       	andi	r18, 0x7F	; 127
 1d8:	fc 01       	movw	r30, r24
 1da:	20 83       	st	Z, r18

		set_bit(PORTD, 5);
 1dc:	82 e3       	ldi	r24, 0x32	; 50
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	22 e3       	ldi	r18, 0x32	; 50
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	f9 01       	movw	r30, r18
 1e6:	20 81       	ld	r18, Z
 1e8:	20 62       	ori	r18, 0x20	; 32
 1ea:	fc 01       	movw	r30, r24
 1ec:	20 83       	st	Z, r18
		set_bit(PORTD, 6);
 1ee:	82 e3       	ldi	r24, 0x32	; 50
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	22 e3       	ldi	r18, 0x32	; 50
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	f9 01       	movw	r30, r18
 1f8:	20 81       	ld	r18, Z
 1fa:	20 64       	ori	r18, 0x40	; 64
 1fc:	fc 01       	movw	r30, r24
 1fe:	20 83       	st	Z, r18
		set_bit(PORTD, 7);
 200:	82 e3       	ldi	r24, 0x32	; 50
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	22 e3       	ldi	r18, 0x32	; 50
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	f9 01       	movw	r30, r18
 20a:	20 81       	ld	r18, Z
 20c:	20 68       	ori	r18, 0x80	; 128
 20e:	fc 01       	movw	r30, r24
 210:	20 83       	st	Z, r18
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	aa e7       	ldi	r26, 0x7A	; 122
 218:	b5 e4       	ldi	r27, 0x45	; 69
 21a:	89 83       	std	Y+1, r24	; 0x01
 21c:	9a 83       	std	Y+2, r25	; 0x02
 21e:	ab 83       	std	Y+3, r26	; 0x03
 220:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 222:	20 e0       	ldi	r18, 0x00	; 0
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	4a ef       	ldi	r20, 0xFA	; 250
 228:	54 e4       	ldi	r21, 0x44	; 68
 22a:	69 81       	ldd	r22, Y+1	; 0x01
 22c:	7a 81       	ldd	r23, Y+2	; 0x02
 22e:	8b 81       	ldd	r24, Y+3	; 0x03
 230:	9c 81       	ldd	r25, Y+4	; 0x04
 232:	0e 94 27 03 	call	0x64e	; 0x64e <__mulsf3>
 236:	dc 01       	movw	r26, r24
 238:	cb 01       	movw	r24, r22
 23a:	8d 83       	std	Y+5, r24	; 0x05
 23c:	9e 83       	std	Y+6, r25	; 0x06
 23e:	af 83       	std	Y+7, r26	; 0x07
 240:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 242:	20 e0       	ldi	r18, 0x00	; 0
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	40 e8       	ldi	r20, 0x80	; 128
 248:	5f e3       	ldi	r21, 0x3F	; 63
 24a:	6d 81       	ldd	r22, Y+5	; 0x05
 24c:	7e 81       	ldd	r23, Y+6	; 0x06
 24e:	8f 81       	ldd	r24, Y+7	; 0x07
 250:	98 85       	ldd	r25, Y+8	; 0x08
 252:	0e 94 a6 02 	call	0x54c	; 0x54c <__cmpsf2>
 256:	88 23       	and	r24, r24
 258:	2c f4       	brge	.+10     	; 0x264 <__vector_1+0xf0>
		__ticks = 1;
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	9a 87       	std	Y+10, r25	; 0x0a
 260:	89 87       	std	Y+9, r24	; 0x09
 262:	3f c0       	rjmp	.+126    	; 0x2e2 <__vector_1+0x16e>
	else if (__tmp > 65535)
 264:	20 e0       	ldi	r18, 0x00	; 0
 266:	3f ef       	ldi	r19, 0xFF	; 255
 268:	4f e7       	ldi	r20, 0x7F	; 127
 26a:	57 e4       	ldi	r21, 0x47	; 71
 26c:	6d 81       	ldd	r22, Y+5	; 0x05
 26e:	7e 81       	ldd	r23, Y+6	; 0x06
 270:	8f 81       	ldd	r24, Y+7	; 0x07
 272:	98 85       	ldd	r25, Y+8	; 0x08
 274:	0e 94 23 03 	call	0x646	; 0x646 <__gesf2>
 278:	18 16       	cp	r1, r24
 27a:	4c f5       	brge	.+82     	; 0x2ce <__vector_1+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 27c:	20 e0       	ldi	r18, 0x00	; 0
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	40 e2       	ldi	r20, 0x20	; 32
 282:	51 e4       	ldi	r21, 0x41	; 65
 284:	69 81       	ldd	r22, Y+1	; 0x01
 286:	7a 81       	ldd	r23, Y+2	; 0x02
 288:	8b 81       	ldd	r24, Y+3	; 0x03
 28a:	9c 81       	ldd	r25, Y+4	; 0x04
 28c:	0e 94 27 03 	call	0x64e	; 0x64e <__mulsf3>
 290:	dc 01       	movw	r26, r24
 292:	cb 01       	movw	r24, r22
 294:	bc 01       	movw	r22, r24
 296:	cd 01       	movw	r24, r26
 298:	0e 94 aa 02 	call	0x554	; 0x554 <__fixunssfsi>
 29c:	dc 01       	movw	r26, r24
 29e:	cb 01       	movw	r24, r22
 2a0:	9a 87       	std	Y+10, r25	; 0x0a
 2a2:	89 87       	std	Y+9, r24	; 0x09
 2a4:	0f c0       	rjmp	.+30     	; 0x2c4 <__vector_1+0x150>
 2a6:	88 ec       	ldi	r24, 0xC8	; 200
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	9c 87       	std	Y+12, r25	; 0x0c
 2ac:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2ae:	8b 85       	ldd	r24, Y+11	; 0x0b
 2b0:	9c 85       	ldd	r25, Y+12	; 0x0c
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <__vector_1+0x13e>
 2b6:	9c 87       	std	Y+12, r25	; 0x0c
 2b8:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2ba:	89 85       	ldd	r24, Y+9	; 0x09
 2bc:	9a 85       	ldd	r25, Y+10	; 0x0a
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	9a 87       	std	Y+10, r25	; 0x0a
 2c2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2c4:	89 85       	ldd	r24, Y+9	; 0x09
 2c6:	9a 85       	ldd	r25, Y+10	; 0x0a
 2c8:	00 97       	sbiw	r24, 0x00	; 0
 2ca:	69 f7       	brne	.-38     	; 0x2a6 <__vector_1+0x132>
 2cc:	14 c0       	rjmp	.+40     	; 0x2f6 <__vector_1+0x182>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2ce:	6d 81       	ldd	r22, Y+5	; 0x05
 2d0:	7e 81       	ldd	r23, Y+6	; 0x06
 2d2:	8f 81       	ldd	r24, Y+7	; 0x07
 2d4:	98 85       	ldd	r25, Y+8	; 0x08
 2d6:	0e 94 aa 02 	call	0x554	; 0x554 <__fixunssfsi>
 2da:	dc 01       	movw	r26, r24
 2dc:	cb 01       	movw	r24, r22
 2de:	9a 87       	std	Y+10, r25	; 0x0a
 2e0:	89 87       	std	Y+9, r24	; 0x09
 2e2:	89 85       	ldd	r24, Y+9	; 0x09
 2e4:	9a 85       	ldd	r25, Y+10	; 0x0a
 2e6:	9e 87       	std	Y+14, r25	; 0x0e
 2e8:	8d 87       	std	Y+13, r24	; 0x0d
 2ea:	8d 85       	ldd	r24, Y+13	; 0x0d
 2ec:	9e 85       	ldd	r25, Y+14	; 0x0e
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <__vector_1+0x17a>
 2f2:	9e 87       	std	Y+14, r25	; 0x0e
 2f4:	8d 87       	std	Y+13, r24	; 0x0d
		_delay_ms(4000);
		clr_bit(PORTD, 5);
 2f6:	82 e3       	ldi	r24, 0x32	; 50
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	22 e3       	ldi	r18, 0x32	; 50
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	f9 01       	movw	r30, r18
 300:	20 81       	ld	r18, Z
 302:	2f 7d       	andi	r18, 0xDF	; 223
 304:	fc 01       	movw	r30, r24
 306:	20 83       	st	Z, r18
		clr_bit(PORTD, 6);
 308:	82 e3       	ldi	r24, 0x32	; 50
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	22 e3       	ldi	r18, 0x32	; 50
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	f9 01       	movw	r30, r18
 312:	20 81       	ld	r18, Z
 314:	2f 7b       	andi	r18, 0xBF	; 191
 316:	fc 01       	movw	r30, r24
 318:	20 83       	st	Z, r18
		clr_bit(PORTD, 7);
 31a:	82 e3       	ldi	r24, 0x32	; 50
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	22 e3       	ldi	r18, 0x32	; 50
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	f9 01       	movw	r30, r18
 324:	20 81       	ld	r18, Z
 326:	2f 77       	andi	r18, 0x7F	; 127
 328:	fc 01       	movw	r30, r24
 32a:	20 83       	st	Z, r18

}
 32c:	2e 96       	adiw	r28, 0x0e	; 14
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	f8 94       	cli
 332:	de bf       	out	0x3e, r29	; 62
 334:	0f be       	out	0x3f, r0	; 63
 336:	cd bf       	out	0x3d, r28	; 61
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	ff 91       	pop	r31
 33e:	ef 91       	pop	r30
 340:	bf 91       	pop	r27
 342:	af 91       	pop	r26
 344:	9f 91       	pop	r25
 346:	8f 91       	pop	r24
 348:	7f 91       	pop	r23
 34a:	6f 91       	pop	r22
 34c:	5f 91       	pop	r21
 34e:	4f 91       	pop	r20
 350:	3f 91       	pop	r19
 352:	2f 91       	pop	r18
 354:	0f 90       	pop	r0
 356:	00 92 5f 00 	sts	0x005F, r0
 35a:	0f 90       	pop	r0
 35c:	1f 90       	pop	r1
 35e:	18 95       	reti

00000360 <__vector_2>:


ISR(INT1_vect)	{
 360:	1f 92       	push	r1
 362:	0f 92       	push	r0
 364:	00 90 5f 00 	lds	r0, 0x005F
 368:	0f 92       	push	r0
 36a:	11 24       	eor	r1, r1
 36c:	2f 93       	push	r18
 36e:	3f 93       	push	r19
 370:	4f 93       	push	r20
 372:	5f 93       	push	r21
 374:	6f 93       	push	r22
 376:	7f 93       	push	r23
 378:	8f 93       	push	r24
 37a:	9f 93       	push	r25
 37c:	af 93       	push	r26
 37e:	bf 93       	push	r27
 380:	ef 93       	push	r30
 382:	ff 93       	push	r31
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	cd b7       	in	r28, 0x3d	; 61
 38a:	de b7       	in	r29, 0x3e	; 62
 38c:	2e 97       	sbiw	r28, 0x0e	; 14
 38e:	de bf       	out	0x3e, r29	; 62
 390:	cd bf       	out	0x3d, r28	; 61

		set_bit(PORTC, 5);
 392:	85 e3       	ldi	r24, 0x35	; 53
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	25 e3       	ldi	r18, 0x35	; 53
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	f9 01       	movw	r30, r18
 39c:	20 81       	ld	r18, Z
 39e:	20 62       	ori	r18, 0x20	; 32
 3a0:	fc 01       	movw	r30, r24
 3a2:	20 83       	st	Z, r18
		set_bit(PORTC, 6);
 3a4:	85 e3       	ldi	r24, 0x35	; 53
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	25 e3       	ldi	r18, 0x35	; 53
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	f9 01       	movw	r30, r18
 3ae:	20 81       	ld	r18, Z
 3b0:	20 64       	ori	r18, 0x40	; 64
 3b2:	fc 01       	movw	r30, r24
 3b4:	20 83       	st	Z, r18
		set_bit(PORTC, 7);
 3b6:	85 e3       	ldi	r24, 0x35	; 53
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	25 e3       	ldi	r18, 0x35	; 53
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	f9 01       	movw	r30, r18
 3c0:	20 81       	ld	r18, Z
 3c2:	20 68       	ori	r18, 0x80	; 128
 3c4:	fc 01       	movw	r30, r24
 3c6:	20 83       	st	Z, r18

		clr_bit(PORTD, 5);
 3c8:	82 e3       	ldi	r24, 0x32	; 50
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	22 e3       	ldi	r18, 0x32	; 50
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	f9 01       	movw	r30, r18
 3d2:	20 81       	ld	r18, Z
 3d4:	2f 7d       	andi	r18, 0xDF	; 223
 3d6:	fc 01       	movw	r30, r24
 3d8:	20 83       	st	Z, r18
		clr_bit(PORTD, 6);
 3da:	82 e3       	ldi	r24, 0x32	; 50
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	22 e3       	ldi	r18, 0x32	; 50
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	f9 01       	movw	r30, r18
 3e4:	20 81       	ld	r18, Z
 3e6:	2f 7b       	andi	r18, 0xBF	; 191
 3e8:	fc 01       	movw	r30, r24
 3ea:	20 83       	st	Z, r18
		clr_bit(PORTD, 7);
 3ec:	82 e3       	ldi	r24, 0x32	; 50
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	22 e3       	ldi	r18, 0x32	; 50
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	f9 01       	movw	r30, r18
 3f6:	20 81       	ld	r18, Z
 3f8:	2f 77       	andi	r18, 0x7F	; 127
 3fa:	fc 01       	movw	r30, r24
 3fc:	20 83       	st	Z, r18
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	aa e7       	ldi	r26, 0x7A	; 122
 404:	b5 e4       	ldi	r27, 0x45	; 69
 406:	89 83       	std	Y+1, r24	; 0x01
 408:	9a 83       	std	Y+2, r25	; 0x02
 40a:	ab 83       	std	Y+3, r26	; 0x03
 40c:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 40e:	20 e0       	ldi	r18, 0x00	; 0
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	4a ef       	ldi	r20, 0xFA	; 250
 414:	54 e4       	ldi	r21, 0x44	; 68
 416:	69 81       	ldd	r22, Y+1	; 0x01
 418:	7a 81       	ldd	r23, Y+2	; 0x02
 41a:	8b 81       	ldd	r24, Y+3	; 0x03
 41c:	9c 81       	ldd	r25, Y+4	; 0x04
 41e:	0e 94 27 03 	call	0x64e	; 0x64e <__mulsf3>
 422:	dc 01       	movw	r26, r24
 424:	cb 01       	movw	r24, r22
 426:	8d 83       	std	Y+5, r24	; 0x05
 428:	9e 83       	std	Y+6, r25	; 0x06
 42a:	af 83       	std	Y+7, r26	; 0x07
 42c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 42e:	20 e0       	ldi	r18, 0x00	; 0
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	40 e8       	ldi	r20, 0x80	; 128
 434:	5f e3       	ldi	r21, 0x3F	; 63
 436:	6d 81       	ldd	r22, Y+5	; 0x05
 438:	7e 81       	ldd	r23, Y+6	; 0x06
 43a:	8f 81       	ldd	r24, Y+7	; 0x07
 43c:	98 85       	ldd	r25, Y+8	; 0x08
 43e:	0e 94 a6 02 	call	0x54c	; 0x54c <__cmpsf2>
 442:	88 23       	and	r24, r24
 444:	2c f4       	brge	.+10     	; 0x450 <__vector_2+0xf0>
		__ticks = 1;
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	9a 87       	std	Y+10, r25	; 0x0a
 44c:	89 87       	std	Y+9, r24	; 0x09
 44e:	3f c0       	rjmp	.+126    	; 0x4ce <__vector_2+0x16e>
	else if (__tmp > 65535)
 450:	20 e0       	ldi	r18, 0x00	; 0
 452:	3f ef       	ldi	r19, 0xFF	; 255
 454:	4f e7       	ldi	r20, 0x7F	; 127
 456:	57 e4       	ldi	r21, 0x47	; 71
 458:	6d 81       	ldd	r22, Y+5	; 0x05
 45a:	7e 81       	ldd	r23, Y+6	; 0x06
 45c:	8f 81       	ldd	r24, Y+7	; 0x07
 45e:	98 85       	ldd	r25, Y+8	; 0x08
 460:	0e 94 23 03 	call	0x646	; 0x646 <__gesf2>
 464:	18 16       	cp	r1, r24
 466:	4c f5       	brge	.+82     	; 0x4ba <__vector_2+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 468:	20 e0       	ldi	r18, 0x00	; 0
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	40 e2       	ldi	r20, 0x20	; 32
 46e:	51 e4       	ldi	r21, 0x41	; 65
 470:	69 81       	ldd	r22, Y+1	; 0x01
 472:	7a 81       	ldd	r23, Y+2	; 0x02
 474:	8b 81       	ldd	r24, Y+3	; 0x03
 476:	9c 81       	ldd	r25, Y+4	; 0x04
 478:	0e 94 27 03 	call	0x64e	; 0x64e <__mulsf3>
 47c:	dc 01       	movw	r26, r24
 47e:	cb 01       	movw	r24, r22
 480:	bc 01       	movw	r22, r24
 482:	cd 01       	movw	r24, r26
 484:	0e 94 aa 02 	call	0x554	; 0x554 <__fixunssfsi>
 488:	dc 01       	movw	r26, r24
 48a:	cb 01       	movw	r24, r22
 48c:	9a 87       	std	Y+10, r25	; 0x0a
 48e:	89 87       	std	Y+9, r24	; 0x09
 490:	0f c0       	rjmp	.+30     	; 0x4b0 <__vector_2+0x150>
 492:	88 ec       	ldi	r24, 0xC8	; 200
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	9c 87       	std	Y+12, r25	; 0x0c
 498:	8b 87       	std	Y+11, r24	; 0x0b
 49a:	8b 85       	ldd	r24, Y+11	; 0x0b
 49c:	9c 85       	ldd	r25, Y+12	; 0x0c
 49e:	01 97       	sbiw	r24, 0x01	; 1
 4a0:	f1 f7       	brne	.-4      	; 0x49e <__vector_2+0x13e>
 4a2:	9c 87       	std	Y+12, r25	; 0x0c
 4a4:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4a6:	89 85       	ldd	r24, Y+9	; 0x09
 4a8:	9a 85       	ldd	r25, Y+10	; 0x0a
 4aa:	01 97       	sbiw	r24, 0x01	; 1
 4ac:	9a 87       	std	Y+10, r25	; 0x0a
 4ae:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4b0:	89 85       	ldd	r24, Y+9	; 0x09
 4b2:	9a 85       	ldd	r25, Y+10	; 0x0a
 4b4:	00 97       	sbiw	r24, 0x00	; 0
 4b6:	69 f7       	brne	.-38     	; 0x492 <__vector_2+0x132>
 4b8:	14 c0       	rjmp	.+40     	; 0x4e2 <__vector_2+0x182>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 4ba:	6d 81       	ldd	r22, Y+5	; 0x05
 4bc:	7e 81       	ldd	r23, Y+6	; 0x06
 4be:	8f 81       	ldd	r24, Y+7	; 0x07
 4c0:	98 85       	ldd	r25, Y+8	; 0x08
 4c2:	0e 94 aa 02 	call	0x554	; 0x554 <__fixunssfsi>
 4c6:	dc 01       	movw	r26, r24
 4c8:	cb 01       	movw	r24, r22
 4ca:	9a 87       	std	Y+10, r25	; 0x0a
 4cc:	89 87       	std	Y+9, r24	; 0x09
 4ce:	89 85       	ldd	r24, Y+9	; 0x09
 4d0:	9a 85       	ldd	r25, Y+10	; 0x0a
 4d2:	9e 87       	std	Y+14, r25	; 0x0e
 4d4:	8d 87       	std	Y+13, r24	; 0x0d
 4d6:	8d 85       	ldd	r24, Y+13	; 0x0d
 4d8:	9e 85       	ldd	r25, Y+14	; 0x0e
 4da:	01 97       	sbiw	r24, 0x01	; 1
 4dc:	f1 f7       	brne	.-4      	; 0x4da <__vector_2+0x17a>
 4de:	9e 87       	std	Y+14, r25	; 0x0e
 4e0:	8d 87       	std	Y+13, r24	; 0x0d
		_delay_ms(4000);
		clr_bit(PORTC, 5);
 4e2:	85 e3       	ldi	r24, 0x35	; 53
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	25 e3       	ldi	r18, 0x35	; 53
 4e8:	30 e0       	ldi	r19, 0x00	; 0
 4ea:	f9 01       	movw	r30, r18
 4ec:	20 81       	ld	r18, Z
 4ee:	2f 7d       	andi	r18, 0xDF	; 223
 4f0:	fc 01       	movw	r30, r24
 4f2:	20 83       	st	Z, r18
		clr_bit(PORTC, 6);
 4f4:	85 e3       	ldi	r24, 0x35	; 53
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	25 e3       	ldi	r18, 0x35	; 53
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	f9 01       	movw	r30, r18
 4fe:	20 81       	ld	r18, Z
 500:	2f 7b       	andi	r18, 0xBF	; 191
 502:	fc 01       	movw	r30, r24
 504:	20 83       	st	Z, r18
		clr_bit(PORTC, 7);
 506:	85 e3       	ldi	r24, 0x35	; 53
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	25 e3       	ldi	r18, 0x35	; 53
 50c:	30 e0       	ldi	r19, 0x00	; 0
 50e:	f9 01       	movw	r30, r18
 510:	20 81       	ld	r18, Z
 512:	2f 77       	andi	r18, 0x7F	; 127
 514:	fc 01       	movw	r30, r24
 516:	20 83       	st	Z, r18

}
 518:	2e 96       	adiw	r28, 0x0e	; 14
 51a:	0f b6       	in	r0, 0x3f	; 63
 51c:	f8 94       	cli
 51e:	de bf       	out	0x3e, r29	; 62
 520:	0f be       	out	0x3f, r0	; 63
 522:	cd bf       	out	0x3d, r28	; 61
 524:	df 91       	pop	r29
 526:	cf 91       	pop	r28
 528:	ff 91       	pop	r31
 52a:	ef 91       	pop	r30
 52c:	bf 91       	pop	r27
 52e:	af 91       	pop	r26
 530:	9f 91       	pop	r25
 532:	8f 91       	pop	r24
 534:	7f 91       	pop	r23
 536:	6f 91       	pop	r22
 538:	5f 91       	pop	r21
 53a:	4f 91       	pop	r20
 53c:	3f 91       	pop	r19
 53e:	2f 91       	pop	r18
 540:	0f 90       	pop	r0
 542:	00 92 5f 00 	sts	0x005F, r0
 546:	0f 90       	pop	r0
 548:	1f 90       	pop	r1
 54a:	18 95       	reti

0000054c <__cmpsf2>:
 54c:	2f d0       	rcall	.+94     	; 0x5ac <__fp_cmp>
 54e:	08 f4       	brcc	.+2      	; 0x552 <__cmpsf2+0x6>
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	08 95       	ret

00000554 <__fixunssfsi>:
 554:	57 d0       	rcall	.+174    	; 0x604 <__fp_splitA>
 556:	88 f0       	brcs	.+34     	; 0x57a <__fixunssfsi+0x26>
 558:	9f 57       	subi	r25, 0x7F	; 127
 55a:	90 f0       	brcs	.+36     	; 0x580 <__fixunssfsi+0x2c>
 55c:	b9 2f       	mov	r27, r25
 55e:	99 27       	eor	r25, r25
 560:	b7 51       	subi	r27, 0x17	; 23
 562:	a0 f0       	brcs	.+40     	; 0x58c <__fixunssfsi+0x38>
 564:	d1 f0       	breq	.+52     	; 0x59a <__fixunssfsi+0x46>
 566:	66 0f       	add	r22, r22
 568:	77 1f       	adc	r23, r23
 56a:	88 1f       	adc	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	1a f0       	brmi	.+6      	; 0x576 <__fixunssfsi+0x22>
 570:	ba 95       	dec	r27
 572:	c9 f7       	brne	.-14     	; 0x566 <__fixunssfsi+0x12>
 574:	12 c0       	rjmp	.+36     	; 0x59a <__fixunssfsi+0x46>
 576:	b1 30       	cpi	r27, 0x01	; 1
 578:	81 f0       	breq	.+32     	; 0x59a <__fixunssfsi+0x46>
 57a:	5e d0       	rcall	.+188    	; 0x638 <__fp_zero>
 57c:	b1 e0       	ldi	r27, 0x01	; 1
 57e:	08 95       	ret
 580:	5b c0       	rjmp	.+182    	; 0x638 <__fp_zero>
 582:	67 2f       	mov	r22, r23
 584:	78 2f       	mov	r23, r24
 586:	88 27       	eor	r24, r24
 588:	b8 5f       	subi	r27, 0xF8	; 248
 58a:	39 f0       	breq	.+14     	; 0x59a <__fixunssfsi+0x46>
 58c:	b9 3f       	cpi	r27, 0xF9	; 249
 58e:	cc f3       	brlt	.-14     	; 0x582 <__fixunssfsi+0x2e>
 590:	86 95       	lsr	r24
 592:	77 95       	ror	r23
 594:	67 95       	ror	r22
 596:	b3 95       	inc	r27
 598:	d9 f7       	brne	.-10     	; 0x590 <__fixunssfsi+0x3c>
 59a:	3e f4       	brtc	.+14     	; 0x5aa <__fixunssfsi+0x56>
 59c:	90 95       	com	r25
 59e:	80 95       	com	r24
 5a0:	70 95       	com	r23
 5a2:	61 95       	neg	r22
 5a4:	7f 4f       	sbci	r23, 0xFF	; 255
 5a6:	8f 4f       	sbci	r24, 0xFF	; 255
 5a8:	9f 4f       	sbci	r25, 0xFF	; 255
 5aa:	08 95       	ret

000005ac <__fp_cmp>:
 5ac:	99 0f       	add	r25, r25
 5ae:	00 08       	sbc	r0, r0
 5b0:	55 0f       	add	r21, r21
 5b2:	aa 0b       	sbc	r26, r26
 5b4:	e0 e8       	ldi	r30, 0x80	; 128
 5b6:	fe ef       	ldi	r31, 0xFE	; 254
 5b8:	16 16       	cp	r1, r22
 5ba:	17 06       	cpc	r1, r23
 5bc:	e8 07       	cpc	r30, r24
 5be:	f9 07       	cpc	r31, r25
 5c0:	c0 f0       	brcs	.+48     	; 0x5f2 <__fp_cmp+0x46>
 5c2:	12 16       	cp	r1, r18
 5c4:	13 06       	cpc	r1, r19
 5c6:	e4 07       	cpc	r30, r20
 5c8:	f5 07       	cpc	r31, r21
 5ca:	98 f0       	brcs	.+38     	; 0x5f2 <__fp_cmp+0x46>
 5cc:	62 1b       	sub	r22, r18
 5ce:	73 0b       	sbc	r23, r19
 5d0:	84 0b       	sbc	r24, r20
 5d2:	95 0b       	sbc	r25, r21
 5d4:	39 f4       	brne	.+14     	; 0x5e4 <__fp_cmp+0x38>
 5d6:	0a 26       	eor	r0, r26
 5d8:	61 f0       	breq	.+24     	; 0x5f2 <__fp_cmp+0x46>
 5da:	23 2b       	or	r18, r19
 5dc:	24 2b       	or	r18, r20
 5de:	25 2b       	or	r18, r21
 5e0:	21 f4       	brne	.+8      	; 0x5ea <__fp_cmp+0x3e>
 5e2:	08 95       	ret
 5e4:	0a 26       	eor	r0, r26
 5e6:	09 f4       	brne	.+2      	; 0x5ea <__fp_cmp+0x3e>
 5e8:	a1 40       	sbci	r26, 0x01	; 1
 5ea:	a6 95       	lsr	r26
 5ec:	8f ef       	ldi	r24, 0xFF	; 255
 5ee:	81 1d       	adc	r24, r1
 5f0:	81 1d       	adc	r24, r1
 5f2:	08 95       	ret

000005f4 <__fp_split3>:
 5f4:	57 fd       	sbrc	r21, 7
 5f6:	90 58       	subi	r25, 0x80	; 128
 5f8:	44 0f       	add	r20, r20
 5fa:	55 1f       	adc	r21, r21
 5fc:	59 f0       	breq	.+22     	; 0x614 <__fp_splitA+0x10>
 5fe:	5f 3f       	cpi	r21, 0xFF	; 255
 600:	71 f0       	breq	.+28     	; 0x61e <__fp_splitA+0x1a>
 602:	47 95       	ror	r20

00000604 <__fp_splitA>:
 604:	88 0f       	add	r24, r24
 606:	97 fb       	bst	r25, 7
 608:	99 1f       	adc	r25, r25
 60a:	61 f0       	breq	.+24     	; 0x624 <__fp_splitA+0x20>
 60c:	9f 3f       	cpi	r25, 0xFF	; 255
 60e:	79 f0       	breq	.+30     	; 0x62e <__fp_splitA+0x2a>
 610:	87 95       	ror	r24
 612:	08 95       	ret
 614:	12 16       	cp	r1, r18
 616:	13 06       	cpc	r1, r19
 618:	14 06       	cpc	r1, r20
 61a:	55 1f       	adc	r21, r21
 61c:	f2 cf       	rjmp	.-28     	; 0x602 <__fp_split3+0xe>
 61e:	46 95       	lsr	r20
 620:	f1 df       	rcall	.-30     	; 0x604 <__fp_splitA>
 622:	08 c0       	rjmp	.+16     	; 0x634 <__fp_splitA+0x30>
 624:	16 16       	cp	r1, r22
 626:	17 06       	cpc	r1, r23
 628:	18 06       	cpc	r1, r24
 62a:	99 1f       	adc	r25, r25
 62c:	f1 cf       	rjmp	.-30     	; 0x610 <__fp_splitA+0xc>
 62e:	86 95       	lsr	r24
 630:	71 05       	cpc	r23, r1
 632:	61 05       	cpc	r22, r1
 634:	08 94       	sec
 636:	08 95       	ret

00000638 <__fp_zero>:
 638:	e8 94       	clt

0000063a <__fp_szero>:
 63a:	bb 27       	eor	r27, r27
 63c:	66 27       	eor	r22, r22
 63e:	77 27       	eor	r23, r23
 640:	cb 01       	movw	r24, r22
 642:	97 f9       	bld	r25, 7
 644:	08 95       	ret

00000646 <__gesf2>:
 646:	b2 df       	rcall	.-156    	; 0x5ac <__fp_cmp>
 648:	08 f4       	brcc	.+2      	; 0x64c <__gesf2+0x6>
 64a:	8f ef       	ldi	r24, 0xFF	; 255
 64c:	08 95       	ret

0000064e <__mulsf3>:
 64e:	0b d0       	rcall	.+22     	; 0x666 <__mulsf3x>
 650:	78 c0       	rjmp	.+240    	; 0x742 <__fp_round>
 652:	69 d0       	rcall	.+210    	; 0x726 <__fp_pscA>
 654:	28 f0       	brcs	.+10     	; 0x660 <__mulsf3+0x12>
 656:	6e d0       	rcall	.+220    	; 0x734 <__fp_pscB>
 658:	18 f0       	brcs	.+6      	; 0x660 <__mulsf3+0x12>
 65a:	95 23       	and	r25, r21
 65c:	09 f0       	breq	.+2      	; 0x660 <__mulsf3+0x12>
 65e:	5a c0       	rjmp	.+180    	; 0x714 <__fp_inf>
 660:	5f c0       	rjmp	.+190    	; 0x720 <__fp_nan>
 662:	11 24       	eor	r1, r1
 664:	ea cf       	rjmp	.-44     	; 0x63a <__fp_szero>

00000666 <__mulsf3x>:
 666:	c6 df       	rcall	.-116    	; 0x5f4 <__fp_split3>
 668:	a0 f3       	brcs	.-24     	; 0x652 <__mulsf3+0x4>

0000066a <__mulsf3_pse>:
 66a:	95 9f       	mul	r25, r21
 66c:	d1 f3       	breq	.-12     	; 0x662 <__mulsf3+0x14>
 66e:	95 0f       	add	r25, r21
 670:	50 e0       	ldi	r21, 0x00	; 0
 672:	55 1f       	adc	r21, r21
 674:	62 9f       	mul	r22, r18
 676:	f0 01       	movw	r30, r0
 678:	72 9f       	mul	r23, r18
 67a:	bb 27       	eor	r27, r27
 67c:	f0 0d       	add	r31, r0
 67e:	b1 1d       	adc	r27, r1
 680:	63 9f       	mul	r22, r19
 682:	aa 27       	eor	r26, r26
 684:	f0 0d       	add	r31, r0
 686:	b1 1d       	adc	r27, r1
 688:	aa 1f       	adc	r26, r26
 68a:	64 9f       	mul	r22, r20
 68c:	66 27       	eor	r22, r22
 68e:	b0 0d       	add	r27, r0
 690:	a1 1d       	adc	r26, r1
 692:	66 1f       	adc	r22, r22
 694:	82 9f       	mul	r24, r18
 696:	22 27       	eor	r18, r18
 698:	b0 0d       	add	r27, r0
 69a:	a1 1d       	adc	r26, r1
 69c:	62 1f       	adc	r22, r18
 69e:	73 9f       	mul	r23, r19
 6a0:	b0 0d       	add	r27, r0
 6a2:	a1 1d       	adc	r26, r1
 6a4:	62 1f       	adc	r22, r18
 6a6:	83 9f       	mul	r24, r19
 6a8:	a0 0d       	add	r26, r0
 6aa:	61 1d       	adc	r22, r1
 6ac:	22 1f       	adc	r18, r18
 6ae:	74 9f       	mul	r23, r20
 6b0:	33 27       	eor	r19, r19
 6b2:	a0 0d       	add	r26, r0
 6b4:	61 1d       	adc	r22, r1
 6b6:	23 1f       	adc	r18, r19
 6b8:	84 9f       	mul	r24, r20
 6ba:	60 0d       	add	r22, r0
 6bc:	21 1d       	adc	r18, r1
 6be:	82 2f       	mov	r24, r18
 6c0:	76 2f       	mov	r23, r22
 6c2:	6a 2f       	mov	r22, r26
 6c4:	11 24       	eor	r1, r1
 6c6:	9f 57       	subi	r25, 0x7F	; 127
 6c8:	50 40       	sbci	r21, 0x00	; 0
 6ca:	8a f0       	brmi	.+34     	; 0x6ee <__mulsf3_pse+0x84>
 6cc:	e1 f0       	breq	.+56     	; 0x706 <__mulsf3_pse+0x9c>
 6ce:	88 23       	and	r24, r24
 6d0:	4a f0       	brmi	.+18     	; 0x6e4 <__mulsf3_pse+0x7a>
 6d2:	ee 0f       	add	r30, r30
 6d4:	ff 1f       	adc	r31, r31
 6d6:	bb 1f       	adc	r27, r27
 6d8:	66 1f       	adc	r22, r22
 6da:	77 1f       	adc	r23, r23
 6dc:	88 1f       	adc	r24, r24
 6de:	91 50       	subi	r25, 0x01	; 1
 6e0:	50 40       	sbci	r21, 0x00	; 0
 6e2:	a9 f7       	brne	.-22     	; 0x6ce <__mulsf3_pse+0x64>
 6e4:	9e 3f       	cpi	r25, 0xFE	; 254
 6e6:	51 05       	cpc	r21, r1
 6e8:	70 f0       	brcs	.+28     	; 0x706 <__mulsf3_pse+0x9c>
 6ea:	14 c0       	rjmp	.+40     	; 0x714 <__fp_inf>
 6ec:	a6 cf       	rjmp	.-180    	; 0x63a <__fp_szero>
 6ee:	5f 3f       	cpi	r21, 0xFF	; 255
 6f0:	ec f3       	brlt	.-6      	; 0x6ec <__mulsf3_pse+0x82>
 6f2:	98 3e       	cpi	r25, 0xE8	; 232
 6f4:	dc f3       	brlt	.-10     	; 0x6ec <__mulsf3_pse+0x82>
 6f6:	86 95       	lsr	r24
 6f8:	77 95       	ror	r23
 6fa:	67 95       	ror	r22
 6fc:	b7 95       	ror	r27
 6fe:	f7 95       	ror	r31
 700:	e7 95       	ror	r30
 702:	9f 5f       	subi	r25, 0xFF	; 255
 704:	c1 f7       	brne	.-16     	; 0x6f6 <__mulsf3_pse+0x8c>
 706:	fe 2b       	or	r31, r30
 708:	88 0f       	add	r24, r24
 70a:	91 1d       	adc	r25, r1
 70c:	96 95       	lsr	r25
 70e:	87 95       	ror	r24
 710:	97 f9       	bld	r25, 7
 712:	08 95       	ret

00000714 <__fp_inf>:
 714:	97 f9       	bld	r25, 7
 716:	9f 67       	ori	r25, 0x7F	; 127
 718:	80 e8       	ldi	r24, 0x80	; 128
 71a:	70 e0       	ldi	r23, 0x00	; 0
 71c:	60 e0       	ldi	r22, 0x00	; 0
 71e:	08 95       	ret

00000720 <__fp_nan>:
 720:	9f ef       	ldi	r25, 0xFF	; 255
 722:	80 ec       	ldi	r24, 0xC0	; 192
 724:	08 95       	ret

00000726 <__fp_pscA>:
 726:	00 24       	eor	r0, r0
 728:	0a 94       	dec	r0
 72a:	16 16       	cp	r1, r22
 72c:	17 06       	cpc	r1, r23
 72e:	18 06       	cpc	r1, r24
 730:	09 06       	cpc	r0, r25
 732:	08 95       	ret

00000734 <__fp_pscB>:
 734:	00 24       	eor	r0, r0
 736:	0a 94       	dec	r0
 738:	12 16       	cp	r1, r18
 73a:	13 06       	cpc	r1, r19
 73c:	14 06       	cpc	r1, r20
 73e:	05 06       	cpc	r0, r21
 740:	08 95       	ret

00000742 <__fp_round>:
 742:	09 2e       	mov	r0, r25
 744:	03 94       	inc	r0
 746:	00 0c       	add	r0, r0
 748:	11 f4       	brne	.+4      	; 0x74e <__fp_round+0xc>
 74a:	88 23       	and	r24, r24
 74c:	52 f0       	brmi	.+20     	; 0x762 <__fp_round+0x20>
 74e:	bb 0f       	add	r27, r27
 750:	40 f4       	brcc	.+16     	; 0x762 <__fp_round+0x20>
 752:	bf 2b       	or	r27, r31
 754:	11 f4       	brne	.+4      	; 0x75a <__fp_round+0x18>
 756:	60 ff       	sbrs	r22, 0
 758:	04 c0       	rjmp	.+8      	; 0x762 <__fp_round+0x20>
 75a:	6f 5f       	subi	r22, 0xFF	; 255
 75c:	7f 4f       	sbci	r23, 0xFF	; 255
 75e:	8f 4f       	sbci	r24, 0xFF	; 255
 760:	9f 4f       	sbci	r25, 0xFF	; 255
 762:	08 95       	ret

00000764 <_exit>:
 764:	f8 94       	cli

00000766 <__stop_program>:
 766:	ff cf       	rjmp	.-2      	; 0x766 <__stop_program>
