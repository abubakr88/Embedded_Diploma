
Button2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000194  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000194  00000208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000c6c  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000baa  00000000  00000000  00000e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000021  00000000  00000000  00001a1e  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 c8 00 	jmp	0x190	; 0x190 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define set_bit(reg, bitnumber) (reg |= (1 << bitnumber))
#define clr_bit(reg, bitnumber) (reg &= ~(1 << bitnumber))
#define get_bit(reg, bitnumber) (reg & (1 << bitnumber))

int main ()
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	clr_bit(DDRD, 0);
  74:	81 e3       	ldi	r24, 0x31	; 49
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	21 e3       	ldi	r18, 0x31	; 49
  7a:	30 e0       	ldi	r19, 0x00	; 0
  7c:	f9 01       	movw	r30, r18
  7e:	20 81       	ld	r18, Z
  80:	2e 7f       	andi	r18, 0xFE	; 254
  82:	fc 01       	movw	r30, r24
  84:	20 83       	st	Z, r18
	clr_bit(DDRD, 1);
  86:	81 e3       	ldi	r24, 0x31	; 49
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	21 e3       	ldi	r18, 0x31	; 49
  8c:	30 e0       	ldi	r19, 0x00	; 0
  8e:	f9 01       	movw	r30, r18
  90:	20 81       	ld	r18, Z
  92:	2d 7f       	andi	r18, 0xFD	; 253
  94:	fc 01       	movw	r30, r24
  96:	20 83       	st	Z, r18
	clr_bit(DDRD, 2);
  98:	81 e3       	ldi	r24, 0x31	; 49
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	21 e3       	ldi	r18, 0x31	; 49
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	f9 01       	movw	r30, r18
  a2:	20 81       	ld	r18, Z
  a4:	2b 7f       	andi	r18, 0xFB	; 251
  a6:	fc 01       	movw	r30, r24
  a8:	20 83       	st	Z, r18

	set_bit(DDRD, 5);
  aa:	81 e3       	ldi	r24, 0x31	; 49
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	21 e3       	ldi	r18, 0x31	; 49
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	f9 01       	movw	r30, r18
  b4:	20 81       	ld	r18, Z
  b6:	20 62       	ori	r18, 0x20	; 32
  b8:	fc 01       	movw	r30, r24
  ba:	20 83       	st	Z, r18
	set_bit(DDRD, 6);
  bc:	81 e3       	ldi	r24, 0x31	; 49
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	21 e3       	ldi	r18, 0x31	; 49
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	f9 01       	movw	r30, r18
  c6:	20 81       	ld	r18, Z
  c8:	20 64       	ori	r18, 0x40	; 64
  ca:	fc 01       	movw	r30, r24
  cc:	20 83       	st	Z, r18
	set_bit(DDRD, 7);
  ce:	81 e3       	ldi	r24, 0x31	; 49
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	21 e3       	ldi	r18, 0x31	; 49
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	f9 01       	movw	r30, r18
  d8:	20 81       	ld	r18, Z
  da:	20 68       	ori	r18, 0x80	; 128
  dc:	fc 01       	movw	r30, r24
  de:	20 83       	st	Z, r18
	while(1)
	{
		if (get_bit(PIND, 0))
  e0:	80 e3       	ldi	r24, 0x30	; 48
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	fc 01       	movw	r30, r24
  e6:	80 81       	ld	r24, Z
  e8:	88 2f       	mov	r24, r24
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	81 70       	andi	r24, 0x01	; 1
  ee:	99 27       	eor	r25, r25
  f0:	00 97       	sbiw	r24, 0x00	; 0
  f2:	51 f0       	breq	.+20     	; 0x108 <main+0x9c>
		{
			set_bit(PORTD, 5);
  f4:	82 e3       	ldi	r24, 0x32	; 50
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	22 e3       	ldi	r18, 0x32	; 50
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	f9 01       	movw	r30, r18
  fe:	20 81       	ld	r18, Z
 100:	20 62       	ori	r18, 0x20	; 32
 102:	fc 01       	movw	r30, r24
 104:	20 83       	st	Z, r18
 106:	09 c0       	rjmp	.+18     	; 0x11a <main+0xae>
		}
		else
		{
			clr_bit(PORTD, 5);
 108:	82 e3       	ldi	r24, 0x32	; 50
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	22 e3       	ldi	r18, 0x32	; 50
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	f9 01       	movw	r30, r18
 112:	20 81       	ld	r18, Z
 114:	2f 7d       	andi	r18, 0xDF	; 223
 116:	fc 01       	movw	r30, r24
 118:	20 83       	st	Z, r18
		}

		if (get_bit(PIND, 1))
 11a:	80 e3       	ldi	r24, 0x30	; 48
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	fc 01       	movw	r30, r24
 120:	80 81       	ld	r24, Z
 122:	88 2f       	mov	r24, r24
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	82 70       	andi	r24, 0x02	; 2
 128:	99 27       	eor	r25, r25
 12a:	00 97       	sbiw	r24, 0x00	; 0
 12c:	51 f0       	breq	.+20     	; 0x142 <main+0xd6>
				{
					set_bit(PORTD, 6);
 12e:	82 e3       	ldi	r24, 0x32	; 50
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	22 e3       	ldi	r18, 0x32	; 50
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	f9 01       	movw	r30, r18
 138:	20 81       	ld	r18, Z
 13a:	20 64       	ori	r18, 0x40	; 64
 13c:	fc 01       	movw	r30, r24
 13e:	20 83       	st	Z, r18
 140:	09 c0       	rjmp	.+18     	; 0x154 <main+0xe8>
				}
				else
				{
					clr_bit(PORTD, 6);
 142:	82 e3       	ldi	r24, 0x32	; 50
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	22 e3       	ldi	r18, 0x32	; 50
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	f9 01       	movw	r30, r18
 14c:	20 81       	ld	r18, Z
 14e:	2f 7b       	andi	r18, 0xBF	; 191
 150:	fc 01       	movw	r30, r24
 152:	20 83       	st	Z, r18
			}

		if (get_bit(PIND, 2))
 154:	80 e3       	ldi	r24, 0x30	; 48
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	fc 01       	movw	r30, r24
 15a:	80 81       	ld	r24, Z
 15c:	88 2f       	mov	r24, r24
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	84 70       	andi	r24, 0x04	; 4
 162:	99 27       	eor	r25, r25
 164:	00 97       	sbiw	r24, 0x00	; 0
 166:	51 f0       	breq	.+20     	; 0x17c <main+0x110>
				{
					set_bit(PORTD, 7);
 168:	82 e3       	ldi	r24, 0x32	; 50
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	22 e3       	ldi	r18, 0x32	; 50
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	f9 01       	movw	r30, r18
 172:	20 81       	ld	r18, Z
 174:	20 68       	ori	r18, 0x80	; 128
 176:	fc 01       	movw	r30, r24
 178:	20 83       	st	Z, r18
 17a:	09 c0       	rjmp	.+18     	; 0x18e <main+0x122>
				}
				else
				{
					clr_bit(PORTD, 7);
 17c:	82 e3       	ldi	r24, 0x32	; 50
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	22 e3       	ldi	r18, 0x32	; 50
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	f9 01       	movw	r30, r18
 186:	20 81       	ld	r18, Z
 188:	2f 77       	andi	r18, 0x7F	; 127
 18a:	fc 01       	movw	r30, r24
 18c:	20 83       	st	Z, r18
				}

	}
 18e:	a8 cf       	rjmp	.-176    	; 0xe0 <main+0x74>

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
